From 2e3653d9966a55355a8706b94ff47873677f6264 Mon Sep 17 00:00:00 2001
Message-ID: <2e3653d9966a55355a8706b94ff47873677f6264.1689663214.git.stefan@agner.ch>
From: Stefan Agner <stefan@agner.ch>
Date: Thu, 18 May 2023 00:09:33 +0200
Subject: [PATCH] [rest] support Thread state change (#1866)

Allow to enable and disable the Thread protocol operation.

(cherry picked from commit 9a87cea0d57a475f0df1696752a9feab4062eaf2)
---
 src/common/CMakeLists.txt              |  1 +
 src/common/api_strings.cpp             | 55 +++++++++++++++++++
 src/common/api_strings.hpp             | 50 +++++++++++++++++
 src/dbus/client/thread_api_dbus.cpp    |  1 +
 src/dbus/common/constants.hpp          |  6 ---
 src/dbus/server/dbus_thread_object.cpp | 27 +---------
 src/rest/json.cpp                      | 18 ++++++-
 src/rest/json.hpp                      | 10 ++++
 src/rest/openapi.yaml                  | 32 ++++++++---
 src/rest/resource.cpp                  | 74 ++++++++++++++++++++------
 src/rest/resource.hpp                  |  2 +
 src/rest/types.hpp                     |  2 +-
 tests/rest/test_rest.py                |  4 +-
 13 files changed, 224 insertions(+), 58 deletions(-)
 create mode 100644 src/common/api_strings.cpp
 create mode 100644 src/common/api_strings.hpp

diff --git a/src/common/CMakeLists.txt b/src/common/CMakeLists.txt
index 1f3aec70e7..d5bc1d31c5 100644
--- a/src/common/CMakeLists.txt
+++ b/src/common/CMakeLists.txt
@@ -27,6 +27,7 @@
 #
 
 add_library(otbr-common
+    api_strings.cpp
     byteswap.hpp
     code_utils.hpp
     dns_utils.cpp
diff --git a/src/common/api_strings.cpp b/src/common/api_strings.cpp
new file mode 100644
index 0000000000..fcb429f75b
--- /dev/null
+++ b/src/common/api_strings.cpp
@@ -0,0 +1,55 @@
+/*
+ *    Copyright (c) 2023, The OpenThread Authors.
+ *    All rights reserved.
+ *
+ *    Redistribution and use in source and binary forms, with or without
+ *    modification, are permitted provided that the following conditions are met:
+ *    1. Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *    2. Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *    3. Neither the name of the copyright holder nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ *    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ *    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ *    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ *    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ *    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *    POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "common/api_strings.hpp"
+
+std::string GetDeviceRoleName(otDeviceRole aRole)
+{
+    std::string roleName;
+
+    switch (aRole)
+    {
+    case OT_DEVICE_ROLE_DISABLED:
+        roleName = OTBR_ROLE_NAME_DISABLED;
+        break;
+    case OT_DEVICE_ROLE_DETACHED:
+        roleName = OTBR_ROLE_NAME_DETACHED;
+        break;
+    case OT_DEVICE_ROLE_CHILD:
+        roleName = OTBR_ROLE_NAME_CHILD;
+        break;
+    case OT_DEVICE_ROLE_ROUTER:
+        roleName = OTBR_ROLE_NAME_ROUTER;
+        break;
+    case OT_DEVICE_ROLE_LEADER:
+        roleName = OTBR_ROLE_NAME_LEADER;
+        break;
+    }
+
+    return roleName;
+}
diff --git a/src/common/api_strings.hpp b/src/common/api_strings.hpp
new file mode 100644
index 0000000000..72f3314b10
--- /dev/null
+++ b/src/common/api_strings.hpp
@@ -0,0 +1,50 @@
+/*
+ *    Copyright (c) 2023, The OpenThread Authors.
+ *    All rights reserved.
+ *
+ *    Redistribution and use in source and binary forms, with or without
+ *    modification, are permitted provided that the following conditions are met:
+ *    1. Redistributions of source code must retain the above copyright
+ *       notice, this list of conditions and the following disclaimer.
+ *    2. Redistributions in binary form must reproduce the above copyright
+ *       notice, this list of conditions and the following disclaimer in the
+ *       documentation and/or other materials provided with the distribution.
+ *    3. Neither the name of the copyright holder nor the
+ *       names of its contributors may be used to endorse or promote products
+ *       derived from this software without specific prior written permission.
+ *
+ *    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ *    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ *    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ *    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ *    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ *    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ *    POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**
+ * @file
+ * This file has helper functions to convert internal state representations
+ * to string (useful for APIs).
+ *
+ */
+#ifndef OTBR_COMMON_API_STRINGS_HPP_
+#define OTBR_COMMON_API_STRINGS_HPP_
+
+#include <string>
+
+#include <openthread/thread.h>
+
+#define OTBR_ROLE_NAME_DISABLED "disabled"
+#define OTBR_ROLE_NAME_DETACHED "detached"
+#define OTBR_ROLE_NAME_CHILD "child"
+#define OTBR_ROLE_NAME_ROUTER "router"
+#define OTBR_ROLE_NAME_LEADER "leader"
+
+std::string GetDeviceRoleName(otDeviceRole aRole);
+
+#endif // OTBR_COMMON_API_STRINGS_HPP_
diff --git a/src/dbus/client/thread_api_dbus.cpp b/src/dbus/client/thread_api_dbus.cpp
index 4bec18536a..502824b0f1 100644
--- a/src/dbus/client/thread_api_dbus.cpp
+++ b/src/dbus/client/thread_api_dbus.cpp
@@ -29,6 +29,7 @@
 #include <map>
 #include <string.h>
 
+#include "common/api_strings.hpp"
 #include "common/code_utils.hpp"
 #include "dbus/client/client_error.hpp"
 #include "dbus/client/thread_api_dbus.hpp"
diff --git a/src/dbus/common/constants.hpp b/src/dbus/common/constants.hpp
index df2ff4846d..bc389f29a9 100644
--- a/src/dbus/common/constants.hpp
+++ b/src/dbus/common/constants.hpp
@@ -115,12 +115,6 @@
 #define OTBR_DBUS_PROPERTY_DNS_UPSTREAM_QUERY_STATE "DnsUpstreamQueryState"
 #define OTBR_DBUS_PROPERTY_TELEMETRY_DATA "TelemetryData"
 
-#define OTBR_ROLE_NAME_DISABLED "disabled"
-#define OTBR_ROLE_NAME_DETACHED "detached"
-#define OTBR_ROLE_NAME_CHILD "child"
-#define OTBR_ROLE_NAME_ROUTER "router"
-#define OTBR_ROLE_NAME_LEADER "leader"
-
 #define OTBR_NAT64_STATE_NAME_DISABLED "disabled"
 #define OTBR_NAT64_STATE_NAME_NOT_RUNNING "not_running"
 #define OTBR_NAT64_STATE_NAME_IDLE "idle"
diff --git a/src/dbus/server/dbus_thread_object.cpp b/src/dbus/server/dbus_thread_object.cpp
index b76bb4b49a..223b5c1619 100644
--- a/src/dbus/server/dbus_thread_object.cpp
+++ b/src/dbus/server/dbus_thread_object.cpp
@@ -44,6 +44,7 @@
 #include <openthread/thread_ftd.h>
 #include <openthread/platform/radio.h>
 
+#include "common/api_strings.hpp"
 #include "common/byteswap.hpp"
 #include "dbus/common/constants.hpp"
 #include "dbus/server/dbus_agent.hpp"
@@ -58,32 +59,6 @@
 using std::placeholders::_1;
 using std::placeholders::_2;
 
-static std::string GetDeviceRoleName(otDeviceRole aRole)
-{
-    std::string roleName;
-
-    switch (aRole)
-    {
-    case OT_DEVICE_ROLE_DISABLED:
-        roleName = OTBR_ROLE_NAME_DISABLED;
-        break;
-    case OT_DEVICE_ROLE_DETACHED:
-        roleName = OTBR_ROLE_NAME_DETACHED;
-        break;
-    case OT_DEVICE_ROLE_CHILD:
-        roleName = OTBR_ROLE_NAME_CHILD;
-        break;
-    case OT_DEVICE_ROLE_ROUTER:
-        roleName = OTBR_ROLE_NAME_ROUTER;
-        break;
-    case OT_DEVICE_ROLE_LEADER:
-        roleName = OTBR_ROLE_NAME_LEADER;
-        break;
-    }
-
-    return roleName;
-}
-
 #if OTBR_ENABLE_NAT64
 static std::string GetNat64StateName(otNat64State aState)
 {
diff --git a/src/rest/json.cpp b/src/rest/json.cpp
index 8aeb89a414..4c135cf51f 100644
--- a/src/rest/json.cpp
+++ b/src/rest/json.cpp
@@ -73,6 +73,22 @@ exit:
     return ret;
 }
 
+bool JsonString2String(const std::string &aJsonString, std::string &aString)
+{
+    cJSON *jsonString;
+    bool   ret = true;
+
+    VerifyOrExit((jsonString = cJSON_Parse(aJsonString.c_str())) != nullptr, ret = false);
+    VerifyOrExit(cJSON_IsString(jsonString), ret = false);
+
+    aString = std::string(jsonString->valuestring);
+
+exit:
+    cJSON_Delete(jsonString);
+
+    return ret;
+}
+
 std::string Json2String(const cJSON *aJson)
 {
     std::string ret;
@@ -347,7 +363,7 @@ std::string Node2JsonString(const NodeInfo &aNode)
     std::string ret;
 
     cJSON_AddItemToObject(node, "BaId", Bytes2HexJson(aNode.mBaId, OT_BORDER_AGENT_ID_LENGTH));
-    cJSON_AddItemToObject(node, "State", cJSON_CreateNumber(aNode.mRole));
+    cJSON_AddItemToObject(node, "State", cJSON_CreateString(aNode.mRole.c_str()));
     cJSON_AddItemToObject(node, "NumOfRouter", cJSON_CreateNumber(aNode.mNumOfRouter));
     cJSON_AddItemToObject(node, "RlocAddress", IpAddr2Json(aNode.mRlocAddress));
     cJSON_AddItemToObject(node, "ExtAddress", Bytes2HexJson(aNode.mExtAddress, OT_EXT_ADDRESS_SIZE));
diff --git a/src/rest/json.hpp b/src/rest/json.hpp
index 29153d5149..a4f6bcf438 100644
--- a/src/rest/json.hpp
+++ b/src/rest/json.hpp
@@ -103,6 +103,16 @@ std::string CString2JsonString(const char *aCString);
  */
 std::string String2JsonString(const std::string &aString);
 
+/**
+ * This method parses a Json string and checks its datatype and returns a string if it is a string.
+ *
+ * @param[in]  aJsonString  A Json string.
+ * @param[out] aString      The string.
+ *
+ * @returns A boolean indicating whether the Json string was indeed a string.
+ */
+bool JsonString2String(const std::string &aJsonString, std::string &aString);
+
 /**
  * This method formats a Node object to a Json object and serialize it to a string.
  *
diff --git a/src/rest/openapi.yaml b/src/rest/openapi.yaml
index f3a4f446d6..43747e2e01 100644
--- a/src/rest/openapi.yaml
+++ b/src/rest/openapi.yaml
@@ -107,20 +107,38 @@ paths:
       summary: Get current Thread state.
       description: |-
         State describing the current Thread role of this Thread node.
-        - 0: disabled
-        - 1: detached
-        - 2: child
-        - 3: router
-        - 4: leader
+        - disabled: The Thread stack is disabled.
+        - detached: Not currently participating in a Thread network/partition.
+        - child: The Thread Child role.
+        - router: The Thread Router role.
+        - leader: The Thread Leader role.
       responses:
         "200":
           description: Successful operation
           content:
             application/json:
               schema:
-                type: number
+                type: string
                 description: Current state
-                example: 4
+                example: "leader"
+    put:
+      tags:
+        - node
+      summary: Set current Thread state.
+      description: |-
+        Enable and disable the Thread protocol operation. If network interface
+        hasn't been started yet, it will get started automatically.
+      responses:
+        "200":
+          description: Successful operation.
+      requestBody:
+        description: New Thread state
+        content:
+          application/json:
+            schema:
+              type: string
+              description: Can be "enable" or "disable".
+              example: "enable"
   /node/network-name:
     get:
       tags:
diff --git a/src/rest/resource.cpp b/src/rest/resource.cpp
index 4c8d257392..0a63e52dc6 100644
--- a/src/rest/resource.cpp
+++ b/src/rest/resource.cpp
@@ -30,8 +30,6 @@
 
 #include "rest/resource.hpp"
 
-#include "string.h"
-
 #define OT_PSKC_MAX_LENGTH 16
 #define OT_EXTENDED_PANID_LENGTH 8
 
@@ -238,7 +236,7 @@ void Resource::GetNodeInfo(Response &aResponse) const
         ++node.mNumOfRouter;
     }
 
-    node.mRole        = otThreadGetDeviceRole(mInstance);
+    node.mRole        = GetDeviceRoleName(otThreadGetDeviceRole(mInstance));
     node.mExtAddress  = reinterpret_cast<const uint8_t *>(otLinkGetExtendedAddress(mInstance));
     node.mNetworkName = otThreadGetNetworkName(mInstance);
     node.mRloc16      = otThreadGetRloc16(mInstance);
@@ -339,33 +337,79 @@ void Resource::ExtendedAddr(const Request &aRequest, Response &aResponse) const
 
 void Resource::GetDataState(Response &aResponse) const
 {
-    std::string state;
-    std::string errorCode;
-    uint8_t     role;
-    // 0 : disabled
-    // 1 : detached
-    // 2 : child
-    // 3 : router
-    // 4 : leader
+    std::string  state;
+    std::string  errorCode;
+    otDeviceRole role;
 
     role  = otThreadGetDeviceRole(mInstance);
-    state = Json::Number2JsonString(role);
+    state = Json::String2JsonString(GetDeviceRoleName(role));
     aResponse.SetBody(state);
     errorCode = GetHttpStatus(HttpStatusCode::kStatusOk);
     aResponse.SetResponsCode(errorCode);
 }
 
-void Resource::State(const Request &aRequest, Response &aResponse) const
+void Resource::SetDataState(const Request &aRequest, Response &aResponse) const
 {
+    otbrError   error = OTBR_ERROR_NONE;
     std::string errorCode;
+    std::string body;
 
-    if (aRequest.GetMethod() == HttpMethod::kGet)
+    VerifyOrExit(Json::JsonString2String(aRequest.GetBody(), body), error = OTBR_ERROR_INVALID_ARGS);
+    if (body == "enable")
     {
-        GetDataState(aResponse);
+        if (!otIp6IsEnabled(mInstance))
+        {
+            SuccessOrExit(otIp6SetEnabled(mInstance, true));
+        }
+        VerifyOrExit(otThreadSetEnabled(mInstance, true) == OT_ERROR_NONE, error = OTBR_ERROR_INVALID_STATE);
+    }
+    else if (body == "disable")
+    {
+        VerifyOrExit(otThreadSetEnabled(mInstance, false) == OT_ERROR_NONE, error = OTBR_ERROR_INVALID_STATE);
     }
     else
     {
+        ExitNow(error = OTBR_ERROR_INVALID_ARGS);
+    }
+
+    errorCode = GetHttpStatus(HttpStatusCode::kStatusOk);
+    aResponse.SetResponsCode(errorCode);
+
+exit:
+    if (error == OTBR_ERROR_INVALID_STATE)
+    {
+        ErrorHandler(aResponse, HttpStatusCode::kStatusConflict);
+    }
+    if (error == OTBR_ERROR_INVALID_ARGS)
+    {
+        ErrorHandler(aResponse, HttpStatusCode::kStatusBadRequest);
+    }
+    else if (error != OTBR_ERROR_NONE)
+    {
+        ErrorHandler(aResponse, HttpStatusCode::kStatusInternalServerError);
+    }
+}
+
+void Resource::State(const Request &aRequest, Response &aResponse) const
+{
+    std::string errorCode;
+
+    switch (aRequest.GetMethod())
+    {
+    case HttpMethod::kGet:
+        GetDataState(aResponse);
+        break;
+    case HttpMethod::kPut:
+        SetDataState(aRequest, aResponse);
+        break;
+    case HttpMethod::kOptions:
+        errorCode = GetHttpStatus(HttpStatusCode::kStatusOk);
+        aResponse.SetResponsCode(errorCode);
+        aResponse.SetComplete();
+        break;
+    default:
         ErrorHandler(aResponse, HttpStatusCode::kStatusMethodNotAllowed);
+        break;
     }
 }
 
diff --git a/src/rest/resource.hpp b/src/rest/resource.hpp
index 7b5e592a9d..9285f21a39 100644
--- a/src/rest/resource.hpp
+++ b/src/rest/resource.hpp
@@ -39,6 +39,7 @@
 #include <openthread/border_agent.h>
 #include <openthread/border_router.h>
 
+#include "common/api_strings.hpp"
 #include "ncp/ncp_openthread.hpp"
 #include "openthread/dataset.h"
 #include "openthread/dataset_ftd.h"
@@ -137,6 +138,7 @@ private:
     void GetDataBaId(Response &aResponse) const;
     void GetDataExtendedAddr(Response &aResponse) const;
     void GetDataState(Response &aResponse) const;
+    void SetDataState(const Request &aRequest, Response &aResponse) const;
     void GetDataNetworkName(Response &aResponse) const;
     void GetDataLeaderData(Response &aResponse) const;
     void GetDataNumOfRoute(Response &aResponse) const;
diff --git a/src/rest/types.hpp b/src/rest/types.hpp
index 0723661a6b..570737e930 100644
--- a/src/rest/types.hpp
+++ b/src/rest/types.hpp
@@ -99,7 +99,7 @@ enum class ConnectionState : std::uint8_t
 struct NodeInfo
 {
     uint8_t        mBaId[OT_BORDER_AGENT_ID_LENGTH];
-    uint32_t       mRole;
+    std::string    mRole;
     uint32_t       mNumOfRouter;
     uint16_t       mRloc16;
     const uint8_t *mExtPanId;
diff --git a/tests/rest/test_rest.py b/tests/rest/test_rest.py
index 6a846489f3..b419c2d655 100644
--- a/tests/rest/test_rest.py
+++ b/tests/rest/test_rest.py
@@ -194,7 +194,7 @@ def node_check(data):
         "Rloc16", "LeaderData", "ExtPanId"
     ]
     expected_value_type = [
-        int, int, str, str, str, int, dict, str
+        str, int, str, str, str, int, dict, str
     ]
     expected_check_dict = dict(zip(expected_keys, expected_value_type))
 
@@ -250,7 +250,7 @@ def node_ext_address_check(data):
 def node_state_check(data):
     assert data is not None
 
-    assert (type(data) == int)
+    assert (type(data) == str)
 
     return True
 
-- 
2.41.0

